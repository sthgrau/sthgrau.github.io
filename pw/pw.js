'use strict';
var randStuff = ["00000111011101110010010010010100001000000000011110100110101100010110000101101101",
"01010011011110011111110111100010100000001110011001111011110010100101101001001001",
"11011101010101011000111011011011101100011001010110110010110111010001101110010000",
"11100001011011000110001111011010001010011000010011101100100010101001011010010111",
"00000010000000100110011110000110101101001111101011001100110001000111101001000011",
"00000110000001100111011010010111111010001010010111100110100011000000001100110000",
"11111100010011101101111111101101111110010111001100001101111101011000001011000001",
"00000001011101110011101100100001110100101100011001101001011110111010100010011111",
"10111111110101010111000111001111010010010101100100001111001000100000000010101101",
"01101110010100001100100101101001101010010001000111111111110001001110001001111100",
"00010110000000011001111010000001110110001111101000110011011101011000010111111110",
"00101110111110000000010010111101010110111001100010111110111101110000011110100110",
"10101101111000001110111111000110100001001011111111001001111101111110111001100101",
"01100010101000111111101100001011100001010010010010111001011000011100110111000111",
"01100011110011111110101010101011111001011000110100111010111011011010100101101010",
"10011011101100001011000011111100010000100010010011100001111111100110001011011000",
"00110000010011000110001010010111011001111010100111001000110100111111100110100101",
"01010101100000100110100101101000100110111110111000110001010011011110101111101011",
"10010100101011111110010111011000110111001001000010011010000000000010101100011111",
"01110001100010001100011000011100100111100101111011111000100100000110100111111101",
"00110010001100011101011110100110101111111001100010111111000001000011010001010000",
"11011111100111111100011110110110101011110111010100010111000111111010101000101100",
"00001010111010111010011010000111101101110101101001001110101001001000001110110000",
"01000000001110110110100100001111110011000111001111000100100010001100010001111001",
"00011101111010101101110110101110100101111001111100101000001100011011000000110011",
"00100101000001101101001010101000101100110001100000000100010011011001111101100110",
"01101011001000001110010101100010100100011001111000110100010111011101001000100000",
"10110001010111100101101111110101111110011011001101111000001000010111001011011001",
"11000101111000011010000001000010000111111100010001010001110110101001001110001010",
"00010010000110011001110000001101101110011010001001010011010110010000000100101111",
"01010011110010001110110010000011101011100101111010011100111111001011110011100010",
"11101000001111001101011110101110111100010001000000100110011101011110111110011101",
"01101111001010010010010100100001010010010100100101110110100101001111110110110010",
"10110100010111010011000101110100011011011100011010010000100100001101111001010101",
"11011110011011001101101001001101101001110001010111111101100010000001110011101100",
"10010111000101101011011000111011001101001100010010011100000111011001001100000010",
"11010011101100010100001111001010101001111001000001110000011101100000101101010101",
"01110111000011010101101101101101001001100101011011011000100010011101000010100010",
"10010101110101111111100110001010111011111011110100001100000010001010110000011011",
"01001011100010000100000001000101001001111110110010001100111010100111110100100110",
"10001101000001001100010001011110111110011100100011111100001100010010000111111101",
"10000101101110101011010100011010111111011100000001010001111001010101110011010000",
"01100011111001110101000111010001110001100000110101001011010101010011011000101111",
"10010101110100010110111111110001111010011101011100010001110001101100100011011100",
"00110100001110111010011000011100001011100011001110011101101100001100010011100111",
"11100111010011010111001110110000000101011000000110000011001001010101111101000100",
"10010110111011000000101101111111101110100001111011100011010011110000000110001100",
"11110000000111011010010000000001010111110001001111000100100111000100101010101001",
"00011111110101100011111010100000111010001001100100100000101001001110101010110101",
"11100001111100000011011100001101110001000111011100001001010001011111111111101010",
"10111010110111011000011111111111000111001110100101000111101001100001000100001000",
"00101000110001110000100001000010011010100001010010100011111110000000000111100100",
"01101100101000011000000001101110100001100111101011010111010011101011000110110000",
"10010101101000100000000111011101011011100001111111110111110100111000000101011111",
"00111000110001010000001000111100100110101001111100110100011001000010000001000100",
"00111001011011001000010110001001011001101111110011100011000110110010001101100101",
"00110100101000110010000010001110001000000100101111110110110001111010110000010001",
"01011000011100100100110001011110011001100111110011111110110101000001100100001110",
"11011001111101001100101101001101101101000011110000010001101100011011101111000111",
"11101000000111100000111111001010000111000000111110010101001101101001000100000000",
"00000111011000111001111011001011100011000000010001110000101011011010011100100100",
"01010101001110010101010100110100000101010000010000011001011011110111111001001111"];
var rowData = [[0,3,2,3,2,1,0,1,0,3,2,3,2,1,0,1],
[3,0,1,0,1,2,3,2,3,0,1,0,1,2,3,2],
[1,2,3,2,3,0,1,0,1,2,3,2,3,0,1,0],
[2,1,0,1,0,3,2,3,2,1,0,1,0,3,2,3]];
var rands = '12345678abcdefghijkmnoprstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ@#$%^&+?';
var ns = [];
var ls = [];
var Ls = [];
var ss = [];
var randy = randStuff.join('');
console.log(randy.length);
var sty = document.createElement("style");
sty.id = "myStyle";
sty.type = 'text/css';
sty.textContent = 'td {width: 20px; } td.c0 { background-color: #ff8888; } td.c1 { background-color: #88ff88; } td.c2 { background-color: #8888ff; } td.c3 { background-color: #cccc88; }';

var par = document.getElementById('tab');
par.appendChild(sty);
console.log(par);


var inp = document.createElement('input');
inp.id = 'offset';
inp.onchange = function(e) {
    var num = parseInt(e.target.value);
    console.log("num=",num);
    if ( num < 600 ) {
        var tn = num;
        var dd = randy.slice(num);
        for ( var i = 0; i < 64; i++ ) {
            var n = dd.slice(tn,tn+3);
            console.log("len(n)=",n.length);
            tn += 3;
            ti = Math.round(bits2Float32(parseInt(n,2),3)*8);
            console.log("ti=",ti);
            ns.push(rands[Math.round(bits2Float32(parseInt(n,2),3)*8)]);
            var l = dd.slice(tn,tn+5);
            tn += 5;
            ls.push(rands[8+Math.round(bits2Float32(parseInt(l,2),5)*24)]);
            var L = dd.slice(tn,tn+5);
            tn += 5;
            Ls.push(rands[32+Math.round(bits2Float32(parseInt(L,2),5)*24)]);
            var s = dd.slice(tn,tn+3);
            tn += 3;
            ss.push(rands[56+Math.round(bits2Float32(parseInt(n,2),3)*8)]);
        }
        console.log("nums=",ns);
        console.log("lowers=",ls);
        console.log("uppers=",Ls);
        console.log("syms=",ss);
        console.log("value == ",num);
        for ( var rr = 0; rr < 16; rr++ ) {
            for ( var cc = 0; cc < 16; cc++ ) {
                var val;
                if ( rowData[rr % 4][cc] == "0" ) {
                    val = ns.pop();
                }
                else if ( rowData[rr % 4][cc] == "1" ) {
                    val = ls.pop();
                }
                else if ( rowData[rr % 4][cc] == "2" ) {
                    val = Ls.pop();
                }
                else if ( rowData[rr % 4][cc] == "3" ) {
                    val = ss.pop();
                }
                var f = par.getElementsByTagName('td')["data_" + rr + "_" + cc];
                f.innerText = val;
            }
        }
    }
}
par.appendChild(inp);

var but = document.createElement('but');
but.innerText = "Doit";
but.onclick = function() {
    console.log("pressed it");
    getit();
}
//    par.appendChild(but);

var ta = document.createElement('table');
for ( var r = 0; r < 16; r++ ) {
    var mr = document.createElement('tr');
    mr.id = 'row_' + r;
    for ( var c = 0; c < 16; c++ ) {
        var mc = document.createElement('td');
        mc.id = 'data_' + r + '_' + c;
   //     mc.className = 'c' + ( 2 * r + c + Math.round(r / 2) % 2 ) % 4;
        mc.className = 'c' + ( 2 * r + c ) % 4;
        mc.innerText = mc.className;
        mr.appendChild(mc);
    }
    ta.appendChild(mr);
}
par.appendChild(ta);

function checkUrl(url) {
    var request = false;
    if (window.XMLHttpRequest) {
            request = new XMLHttpRequest;
    } else if (window.ActiveXObject) {
            request = new ActiveXObject("Microsoft.XMLHttp");
    }

    if (request) {
            request.open("GET", url);
            if (request.status == 200) { return true; }
    }

    return false;
}

function doit() {
    let p1 = new Promise((resolve, reject) => {
        this.pieceImg = new Image();
        this.pieceImg.src = "images/chexpieces.png";
        this.pieceImg.onload = function () {
            resolve(this);
        };
    })
    Promise.all([p1,p2]).then((value) => {
        consolelog("apres p1");
        //after promise returns
        this.afterPro(value)
    }).catch((reason) => {
        consolelog('Handle rejected promise (' + reason + ') here.');
    })
}

function getit() {
    console.log("doing it");
    //var myUrl = "https://chex.2id.us";
    var myUrl = "https://www.random.org/integers/?num=20&min=0&max=268435455&col=1&base=16&format=plain&rnd=new";
    GM_xmlhttpRequest({
        method: "GET",
        url: myUrl,
        onload: function(response) {
            console.log(response.responseText);
            //alert(response.responseText);
        }
    });
    console.log("done it?");
}

function bits2Float32(bytes,exp) {
 //       console.log(bytes,exp);
    return bytes / ( 1 << exp );
}

